// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ENGINE.Base_Animation_Mod = (function() {
    var BACKGROUND_COLOR, BROKEN_TRANSPARENT, DISTORT, EXPAND, FADE_TO_BLACK, FADE_TO_D_BLUE, FADE_TO_D_GREEN, LIVE_LONGER, RAND_RGB, SHRINK, SIGN_DISTORT, WIREFRAME;

    Base_Animation_Mod.prototype.b_animation = void 0;

    Base_Animation_Mod.prototype.type = void 0;

    Base_Animation_Mod.prototype.applied = false;

    Base_Animation_Mod.prototype.id = void 0;

    function Base_Animation_Mod(b_animation, type) {
      this.b_animation = b_animation;
      this.type = type;
      this.apply_scale = __bind(this.apply_scale, this);
      this.apply = __bind(this.apply, this);
      this.fade_color = __bind(this.fade_color, this);
      this.mod_redundant = __bind(this.mod_redundant, this);
      this.remove_on_redundancy = __bind(this.remove_on_redundancy, this);
      this.assign_type = __bind(this.assign_type, this);
      this.model = __bind(this.model, this);
      this.time_passed = __bind(this.time_passed, this);
      this.lifespan = __bind(this.lifespan, this);
      if (this.type == null) {
        this.assign_type();
      }
      this.id = _.uniqueId('mod');
    }

    Base_Animation_Mod.prototype.lifespan = function() {
      return this.b_animation.lifespan;
    };

    Base_Animation_Mod.prototype.time_passed = function() {
      return this.b_animation.time_passed;
    };

    Base_Animation_Mod.prototype.model = function() {
      return this.b_animation.model;
    };

    RAND_RGB = "rr";

    LIVE_LONGER = "ll";

    SHRINK = "s";

    EXPAND = "e";

    DISTORT = "d";

    SIGN_DISTORT = "sd";

    WIREFRAME = "w";

    BROKEN_TRANSPARENT = "t";

    FADE_TO_BLACK = "fb";

    FADE_TO_D_BLUE = "fdb";

    FADE_TO_D_GREEN = "fdg";

    BACKGROUND_COLOR = "#101010";

    Base_Animation_Mod.prototype.assign_type = function() {
      return this.type = _.sample([FADE_TO_D_BLUE, FADE_TO_D_BLUE, FADE_TO_BLACK, FADE_TO_BLACK, LIVE_LONGER]);
    };

    Base_Animation_Mod.prototype.remove_on_redundancy = function() {
      if (this.mod_redundant()) {
        return this.applied = true;
      }
    };

    Base_Animation_Mod.prototype.mod_redundant = function() {
      var mod, _i, _len, _ref;
      _ref = this.b_animation.mods;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mod = _ref[_i];
        if (mod.id !== this.id) {
          if (mod.type === this.type && !mod.applied) {
            return true;
          }
        }
      }
      return false;
    };

    Base_Animation_Mod.prototype.fade_color = function() {
      var val;
      val = (function() {
        switch (this.type) {
          case FADE_TO_BLACK:
            return 0x000000;
          case FADE_TO_D_BLUE:
            return 0x000022;
          case FADE_TO_D_GREEN:
            return 0x002200;
        }
      }).call(this);
      return val;
    };

    Base_Animation_Mod.prototype.apply = function() {
      var black, distort_factor, percent_complete, rand_color, shrink_percent, shrink_progress, shrink_scale, v, wireframeMaterial, _i, _j, _len, _len1, _ref, _ref1;
      if (!this.applied) {
        if (this.type === RAND_RGB) {
          rand_color = _.sample(["0xff0000", "0x00ff00", "0x0000ff"]);
          if (this.model()) {
            this.model().material.materials[0].color.setHex(rand_color);
            this.model().material.materials[1].color.setHex(rand_color);
          }
          this.applied = true;
        }
        if (this.type === LIVE_LONGER) {
          this.b_animation.lifespan += Math.random() * 9;
          this.applied = true;
        }
        if (this.type === SHRINK) {
          if (!this.model()) {
            return;
          }
          percent_complete = this.time_passed() / this.lifespan();
          shrink_percent = .70;
          shrink_progress = (1 - shrink_percent) * percent_complete;
          shrink_scale = 1 - shrink_progress;
          this.apply_scale(shrink_scale);
          if (shrink_scale < shrink_percent) {
            this.applied = true;
          }
        }
        if (this.type === EXPAND) {
          if (!this.model()) {
            return;
          }
          percent_complete = this.time_passed() / this.lifespan();
          shrink_percent = 1.3;
          shrink_progress = (shrink_percent - 1) * percent_complete;
          shrink_scale = 1 + shrink_progress;
          this.apply_scale(shrink_scale);
          if (shrink_scale > shrink_percent) {
            this.applied = true;
          }
        }
        if (this.type === WIREFRAME) {
          if (this.model() === void 0) {
            return;
          }
          wireframeMaterial = new THREE.MeshBasicMaterial({
            color: 0x000011,
            wireframe: true,
            transparent: true
          });
          this.model().material = wireframeMaterial;
          this.applied = true;
        }
        if (this.type === DISTORT) {
          this.remove_on_redundancy();
          if (this.model() === void 0) {
            return;
          }
          if (percent_chance(55)) {
            return;
          }
          _ref = this.model().geometry.vertices;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            distort_factor = .4;
            v.x -= _.random(-distort_factor, distort_factor);
            v.y += _.random(-distort_factor, distort_factor);
          }
          this.model().geometry.verticesNeedUpdate = true;
        }
        if (this.type === SIGN_DISTORT) {
          this.remove_on_redundancy();
          if (this.model() === void 0) {
            return;
          }
          if (percent_chance(40)) {
            return;
          }
          _ref1 = this.model().geometry.vertices;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            distort_factor = Math.sin(this.time_passed()) * .005;
            v.x -= _.random(-distort_factor * 3.5, distort_factor);
            v.y += _.random(-distort_factor * 3.5, distort_factor);
          }
          this.model().geometry.verticesNeedUpdate = true;
        }
        if (this.type === BROKEN_TRANSPARENT) {
          this.remove_on_redundancy();
          if (this.model() === void 0) {
            return;
          }
          this.model().material.materials[0] = new THREE.MeshNormalMaterial({
            transparent: true,
            opacity: 0.5
          });
          this.applied = true;
        }
        if (this.type === FADE_TO_BLACK || this.type === FADE_TO_D_GREEN || this.type === FADE_TO_D_BLUE) {
          this.remove_on_redundancy();
          if (this.model() === void 0) {
            return;
          }
          black = void 0;
          percent_complete = this.time_passed() / this.lifespan();
          black = new THREE.Color(this.fade_color());
          if (this.model().material.materials != null) {
            this.model().material.materials[0].color.lerp(black, .049 * percent_complete);
            return this.model().material.materials[1].color.lerp(black, .049 * percent_complete);
          } else {
            return this.model().material.color.lerp(black, .01 * percent_complete);
          }
        }
      }
    };

    Base_Animation_Mod.prototype.apply_scale = function(shrink_scale) {
      var model;
      model = this.model();
      model.scale.x = shrink_scale;
      model.scale.y = shrink_scale;
      return model.scale.z = shrink_scale;
    };

    return Base_Animation_Mod;

  })();

}).call(this);
