// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ENGINE = {};

  ENGINE.Entity = (function() {
    function Entity(args) {
      _.extend(this, args);
      if (this.oncreate) {
        this.oncreate();
      }
    }

    Entity.prototype.x = void 0;

    Entity.prototype.y = void 0;

    Entity.prototype.z = void 0;

    Entity.prototype.pos = void 0;

    Entity.prototype._remove = false;

    Entity.prototype.collection = void 0;

    Entity.prototype.model = void 0;

    Entity.prototype.step = function(delta) {
      return console.log("Entity step() needs to be defined");
    };

    Entity.prototype.render = function(delta) {
      return console.log("Entity render() needs to be defined");
    };

    Entity.prototype.updateModelPosition = function() {
      if (this.model != null) {
        return this.model.position.set(this.x, this.y, this.z);
      }
    };

    Entity.prototype.positionFromData = function() {
      return new THREE.Vector3(this.x, this.y, this.z);
    };

    Entity.prototype.remove = function() {
      this._remove = true;
      return this.collection.dirty = true;
    };

    return Entity;

  })();

  ENGINE.Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection(parent) {
      this.parent = parent;
      this.index = 0;
      this.dirty = false;
      if (this.oncreate) {
        this.oncreate();
      }
    }

    Collection.prototype.parent = void 0;

    Collection.prototype.index = void 0;

    Collection.prototype.dirty = false;

    Collection.prototype.add = function(constructor, args) {
      var entity;
      entity = new constructor(_.extend({
        collection: this,
        index: this.index++
      }, args));
      this.push(entity);
      return entity;
    };

    Collection.prototype.clean = function() {
      var i, len, _results;
      len = this.length;
      i = 0;
      _results = [];
      while (i < len) {
        if (this[i]._remove) {
          this.splice(i--, 1);
          len--;
        }
        _results.push(i++);
      }
      return _results;
    };

    Collection.prototype.step = function(delta) {
      if (this.dirty) {
        this.dirty = false;
        this.clean();
        return this.sort(function(a, b) {
          return (a.zIndex | 0) - (b.zIndex | 0);
        });
      }
    };

    Collection.prototype.call = function(method) {
      var args, i, len, _results;
      args = Array.prototype.slice.call(arguments, 1);
      i = 0;
      len = this.length;
      _results = [];
      while (i < len) {
        if (this[i][method]) {
          this[i][method].apply(this[i], args);
        }
        _results.push(i++);
      }
      return _results;
    };

    Collection.prototype.apply = function(method, args) {
      var i, len, _results;
      i = 0;
      len = this.length;
      _results = [];
      while (i < len) {
        if (this[i][method]) {
          this[i][method].apply(this[i], args);
        }
        _results.push(i++);
      }
      return _results;
    };

    return Collection;

  })(Array);

}).call(this);
