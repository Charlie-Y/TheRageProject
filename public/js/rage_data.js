// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ENGINE.Base_Animation_Mod = (function() {
    var DISTORT, EXPAND, LIVE_LONGER, RAND_RGB, SHRINK, WIREFRAME;

    Base_Animation_Mod.prototype.b_animation = void 0;

    Base_Animation_Mod.prototype.type = void 0;

    Base_Animation_Mod.prototype.applied = false;

    function Base_Animation_Mod(b_animation) {
      this.b_animation = b_animation;
      this.apply_scale = __bind(this.apply_scale, this);
      this.apply = __bind(this.apply, this);
      this.remove_self = __bind(this.remove_self, this);
      this.assign_type = __bind(this.assign_type, this);
      this.model = __bind(this.model, this);
      this.time_passed = __bind(this.time_passed, this);
      this.lifespan = __bind(this.lifespan, this);
      this.assign_type();
    }

    Base_Animation_Mod.prototype.lifespan = function() {
      return this.b_animation.lifespan;
    };

    Base_Animation_Mod.prototype.time_passed = function() {
      return this.b_animation.time_passed;
    };

    Base_Animation_Mod.prototype.model = function() {
      return this.b_animation.model;
    };

    RAND_RGB = "rr";

    LIVE_LONGER = "ll";

    SHRINK = "s";

    EXPAND = "e";

    DISTORT = "d";

    WIREFRAME = "w";

    Base_Animation_Mod.prototype.assign_type = function() {
      return this.type = _.sample([WIREFRAME, LIVE_LONGER]);
    };

    Base_Animation_Mod.prototype.remove_self = function() {
      return this.b_animation.mods = _.reject(this.b_animation.mods, function(elem) {
        return elem === this;
      });
    };

    Base_Animation_Mod.prototype.apply = function() {
      var percent_complete, rand_color, shrink_percent, shrink_progress, shrink_scale, wireframeMaterial;
      if (!this.applied) {
        if (this.type === RAND_RGB) {
          rand_color = _.sample(["0xff0000", "0x00ff00", "0x0000ff"]);
          if (this.model()) {
            this.model().material.materials[0].color.setHex(rand_color);
            this.model().material.materials[1].color.setHex(rand_color);
          }
          this.applied = true;
        }
        if (this.type === LIVE_LONGER) {
          this.b_animation.lifespan += .4;
          this.applied = true;
        }
        if (this.type === SHRINK) {
          if (!this.model()) {
            return;
          }
          percent_complete = this.time_passed() / this.lifespan();
          shrink_percent = .70;
          shrink_progress = (1 - shrink_percent) * percent_complete;
          shrink_scale = 1 - shrink_progress;
          this.apply_scale(shrink_scale);
          if (shrink_scale < shrink_percent) {
            this.applied = true;
          }
        }
        if (this.type === EXPAND) {
          if (!this.model()) {
            return;
          }
          percent_complete = this.time_passed() / this.lifespan();
          shrink_percent = 1.3;
          shrink_progress = (shrink_percent - 1) * percent_complete;
          shrink_scale = 1 + shrink_progress;
          this.apply_scale(shrink_scale);
          if (shrink_scale > shrink_percent) {
            this.applied = true;
          }
        }
        if (this.type === WIREFRAME) {
          if (this.model() === void 0) {
            return;
          }
          wireframeMaterial = new THREE.MeshBasicMaterial({
            color: 0x00ee00,
            wireframe: true,
            transparent: true
          });
          this.model().material = wireframeMaterial;
          this.applied = true;
        }
        if (this.type === DISTORT) {
          if (this.model() === void 0) {

          }
        }
      }
    };

    Base_Animation_Mod.prototype.apply_scale = function(shrink_scale) {
      var model;
      model = this.model();
      model.scale.x = shrink_scale;
      model.scale.y = shrink_scale;
      return model.scale.z = shrink_scale;
    };

    return Base_Animation_Mod;

  })();

  ENGINE.Base_Animation = (function(_super) {
    __extends(Base_Animation, _super);

    Base_Animation.prototype.lifespan = void 0;

    Base_Animation.prototype.time_passed = 0;

    Base_Animation.prototype.letter = 'X';

    Base_Animation.prototype.mods = [];

    Base_Animation.get_random_animation = function() {
      var rl;
      rl = _.sample(ENGINE.base_animations);
      return rl;
    };

    function Base_Animation(args) {
      this.add_random_modifier = __bind(this.add_random_modifier, this);
      this.apply_mods = __bind(this.apply_mods, this);
      this.has_mods = __bind(this.has_mods, this);
      this.render = __bind(this.render, this);
      this.step = __bind(this.step, this);
      this.time_left = __bind(this.time_left, this);
      this.full_remove = __bind(this.full_remove, this);
      Base_Animation.__super__.constructor.call(this, args);
    }

    Base_Animation.prototype.full_remove = function() {
      ENGINE.threeScene.remove(this.model);
      return this.remove();
    };

    Base_Animation.prototype.time_left = function() {
      return this.lifespan - this.time_passed;
    };

    Base_Animation.prototype.step = function(delta) {
      if (this.time_left() < 0) {
        this.full_remove();
      }
      if (this.time_left() > 0) {
        return this.time_passed += delta;
      }
    };

    Base_Animation.prototype.render = function() {
      var materialArray, materialFront, materialSide, randX, randY, randZ, textGeom, textHeight, textMaterial, textMesh, textWidth;
      if (this.model === void 0) {
        materialFront = new THREE.MeshBasicMaterial({
          color: 0xffffff
        });
        materialSide = new THREE.MeshBasicMaterial({
          color: 0x101010
        });
        materialArray = [materialFront, materialSide];
        textGeom = new THREE.TextGeometry(this.letter, {
          size: 40,
          height: 8,
          curveSegments: 5,
          font: "helvetiker",
          weight: "bold",
          style: "normal",
          material: 0,
          extrudeMaterial: 1
        });
        textMaterial = new THREE.MeshFaceMaterial(materialArray);
        textMesh = new THREE.Mesh(textGeom, textMaterial);
        textGeom.computeBoundingBox();
        textWidth = textGeom.boundingBox.max.x - textGeom.boundingBox.min.x;
        textHeight = textGeom.boundingBox.max.y - textGeom.boundingBox.min.y;
        textMesh.rotation.x = -Math.PI / 2;
        randX = _.random(-20, 20);
        randY = _.random(0, 30);
        randZ = _.random(-20, 20);
        textMesh.position.set(-0.5 * textWidth + randX, 0, .5 * textHeight + randZ);
        this.model = textMesh;
        return ENGINE.threeScene.add(textMesh);
      } else {
        return this.apply_mods();
      }
    };

    Base_Animation.prototype.has_mods = function() {
      return this.mods.length > 0;
    };

    Base_Animation.prototype.apply_mods = function() {
      var mod, _i, _len, _ref, _results;
      if (this.has_mods()) {
        _ref = this.mods;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mod = _ref[_i];
          _results.push(mod.apply());
        }
        return _results;
      }
    };

    Base_Animation.prototype.add_random_modifier = function() {
      return this.mods.push(new ENGINE.Base_Animation_Mod(this));
    };

    return Base_Animation;

  })(ENGINE.Entity);

  ENGINE.Rage_Sound = (function() {
    function Rage_Sound() {}

    Rage_Sound.test = function() {
      var audio;
      audio = new Audio('/audio/inception.mp3');
      return audio.play();
    };

    return Rage_Sound;

  })();

}).call(this);
